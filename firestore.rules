rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
  // Function to check if the user has the 'user' role
  function isUser() {
    return hasAnyRole(['user']);
  }

  // Function to check if the user has the 'admin' role
  function isAdmin() {
    return hasAnyRole(['admin']);
  }
  
  function isOwner() {
  return hasAnyRole(['owner']);
  }
  
  
function hasAnyRole(roles) {
  return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(roles)
}
  
  match /events/{eventId} {
  allow write: if isOwner() || isAdmin();
  }
  
  match /podcasts/{podcastId} {
  allow write: if isOwner() || isAdmin();
  }

   // Allow read and write access to the 'users' collection
    match /users/{userId} {
    allow write: if (isSignedIn() && isOwner()) || (isSignedIn() && isOwner())
      // allow write: if request.auth.uid == userId || hasAnyRole(['admin']);
      allow read: if true
    }

    // // Allow read and write access to the 'posts' collection
    // ============ I do not currently have a posts collection ============
    // ============ but may implement in the future.           ============
    // match /posts/{postId} {
    // 	allow read: if isSignedIn();
    //   allow write: if isSignedIn() && isUser();
    //   // Additional rules for admin users
    //   allow read, write: if isSignedIn() && isAdmin();
    // }

    // Define rules for the 'comments' collection
    // Comments for podcasts will be implemented in the future 1 hunned
    match /comments/{commentId} {
      allow read, write: if isSignedIn() && isUser();
      // Additional rules for admin users
      allow read, write: if isSignedIn() && isAdmin();
    }
  

  // Function to check if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }
  }
  
}